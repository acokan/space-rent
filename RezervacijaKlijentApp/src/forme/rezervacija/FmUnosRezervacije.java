/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.rezervacija;

import domen.Korisnik;
import domen.Prostorija;
import domen.Rezervacija;
import domen.StavkaRezervacije;
import model.TblModelKorisnik;
import model.TblModelRezervacija;
import model.TblModelStavkaRezervacije;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import kontroler.Kontroler;
import util.Util;

/**
 *
 * @author Aco Kandic
 */
public class FmUnosRezervacije extends javax.swing.JDialog {

    /**
     * Creates new form FmUnosRezervacije
     */
    Border border;

    public FmUnosRezervacije(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        srediFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtBrojRezervacije = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbKorisnici = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblStavkaRezervacije = new javax.swing.JTable();
        jbtnDodaj = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();
        jbtnSacuvajRezervaciju = new javax.swing.JButton();
        jbtnOdustani = new javax.swing.JButton();
        jbtnPogledajRezervacije = new javax.swing.JButton();
        datePicker = new org.jdesktop.swingx.JXDatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rad sa rezervacijama");

        jLabel1.setText("Broj rezervacije: ");

        jLabel2.setText("Datum rezervacije:");

        jLabel3.setText("Korisnik: ");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stavka rezervacije"));

        jtblStavkaRezervacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Redni broj", "Vreme od", "Vreme do", "Prostorija", "Iznos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblStavkaRezervacije);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addContainerGap())
        );

        jbtnDodaj.setText("Dodaj");
        jbtnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajActionPerformed(evt);
            }
        });

        jbtnObrisi.setText("Obrisi");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        jbtnSacuvajRezervaciju.setText("Sacuvaj rezervaciju");
        jbtnSacuvajRezervaciju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajRezervacijuActionPerformed(evt);
            }
        });

        jbtnOdustani.setText("Odustani");
        jbtnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOdustaniActionPerformed(evt);
            }
        });

        jbtnPogledajRezervacije.setText("Pogledaj sve rezervacije");
        jbtnPogledajRezervacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPogledajRezervacijeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbtnDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jbtnObrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnSacuvajRezervaciju)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnPogledajRezervacije)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtBrojRezervacije))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbKorisnici, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(datePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtBrojRezervacije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbKorisnici, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jbtnDodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnObrisi)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnOdustani)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnSacuvajRezervaciju)
                        .addComponent(jbtnPogledajRezervacije)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOdustaniActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jbtnOdustaniActionPerformed

    private void jbtnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajActionPerformed
        TblModelStavkaRezervacije tmrs = (TblModelStavkaRezervacije) jtblStavkaRezervacije.getModel();
        tmrs.dodajStavkuRezervacije();
    }//GEN-LAST:event_jbtnDodajActionPerformed

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnObrisiActionPerformed
        int selektovaniRed = jtblStavkaRezervacije.getSelectedRow();

        if (selektovaniRed == -1) {
            JOptionPane.showMessageDialog(this, "Selektujte stavku rezervacije koju zelite da obrisete!", "Brisanje rezervacije", JOptionPane.ERROR_MESSAGE);
        } else {
            TblModelStavkaRezervacije tmsr = (TblModelStavkaRezervacije) jtblStavkaRezervacije.getModel();
            tmsr.obrisiStavkuRezervacije(selektovaniRed);
            JOptionPane.showMessageDialog(this, "Izabrana stavka rezervacije je obrisana!", "Brisanje rezervacije", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbtnObrisiActionPerformed

    private void jbtnSacuvajRezervacijuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSacuvajRezervacijuActionPerformed

        int rezim = Kontroler.vratiInstancuKontrolera().getAktivanSK();
        if (rezim == Util.SK_UNOS_REZERVACIJE) {
            try {
                Object[] opcije = {"Da", "Ne"};
                int izbor = JOptionPane.showOptionDialog(this, "Da li zelite sacuvati rezervaciju?", "Cuvanje rezervacije", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcije, "Da");
                if (izbor == 0) {
                    Rezervacija rezervacija = kreirajRezervacijuSaForme();
                    boolean sacuvana = Kontroler.vratiInstancuKontrolera().sacuvajRezervaciju(rezervacija);
                    if (sacuvana == true) {
                        JOptionPane.showMessageDialog(this, "Sistem je zapamtio rezervaciju!", "Cuvanje rezervacije", JOptionPane.INFORMATION_MESSAGE);
                        vratiDefaultBorder();
                        srediFormu();
                    } else {
                        JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti rezervaciju!", "Greska", JOptionPane.ERROR_MESSAGE);
                        vratiDefaultBorder();
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti rezervaciju!", "Greska", JOptionPane.ERROR_MESSAGE);
                vratiDefaultBorder();
            }
        }
        if (rezim == Util.SK_IZMENA_REZERVACIJE) {
            try {
                Object[] opcije = {"Da", "Ne"};
                int izbor = JOptionPane.showOptionDialog(this, "Da li zelite izmeniti rezervaciju?", "Izmena rezervacije", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcije, "Da");
                if (izbor == 0) {
                    Rezervacija r = kreirajRezervacijuSaForme();

                    boolean azuriran = Kontroler.vratiInstancuKontrolera().updateRezervacije(r);
                    if (azuriran) {
                        JOptionPane.showMessageDialog(this, "Sistem je izmenio rezervaciju!", "Izmena rezervacije", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni rezervaciju!", "Greska", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni rezervaciju!", "Greska", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_jbtnSacuvajRezervacijuActionPerformed

    private void jbtnPogledajRezervacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPogledajRezervacijeActionPerformed

        FmPretragaRezervacija fpr = new FmPretragaRezervacija(null, true);
        fpr.setVisible(true);

    }//GEN-LAST:event_jbtnPogledajRezervacijeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodaj;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnOdustani;
    private javax.swing.JButton jbtnPogledajRezervacije;
    private javax.swing.JButton jbtnSacuvajRezervaciju;
    private javax.swing.JComboBox jcbKorisnici;
    private javax.swing.JTable jtblStavkaRezervacije;
    private javax.swing.JTextField jtxtBrojRezervacije;
    // End of variables declaration//GEN-END:variables

    private void popuniComboKorisnici() {
        jcbKorisnici.removeAllItems();
        try {
            for (Korisnik k : Kontroler.vratiInstancuKontrolera().vratiListuKorisnika()) {
                jcbKorisnici.addItem(k);
            }
        } catch (Exception ex) {
            System.out.println("Lista korisnika nije pronadjena!");
        }
    }

    private void srediFormu() {

        int rezim = Kontroler.vratiInstancuKontrolera().getAktivanSK();

        if (rezim == Util.SK_UNOS_REZERVACIJE) {

            jtxtBrojRezervacije.setText("");
//            jtxtDatumRezervacije.setText("");
            datePicker.setDate(null);
            popuniComboKorisnici();
            jtblStavkaRezervacije.setModel(new TblModelStavkaRezervacije(new Rezervacija()));

            List<Prostorija> listaProstorija = new ArrayList<>();
            try {
                listaProstorija = Kontroler.vratiInstancuKontrolera().vratiListuProstorija();
            } catch (Exception ex) {
                System.out.println("Prostorije nisu pronadjene!");
            }
            JComboBox jcb = new JComboBox(listaProstorija.toArray());
            TableColumn tc = jtblStavkaRezervacije.getColumnModel().getColumn(3);
            tc.setCellEditor(new DefaultCellEditor(jcb));

            centrirajKolone();

//            jbtnDodaj.setEnabled(false);
            border = jtxtBrojRezervacije.getBorder();

        } else if (rezim == Util.SK_IZMENA_REZERVACIJE) {

            jbtnSacuvajRezervaciju.setText("Izmeni rezervaciju");
            jbtnPogledajRezervacije.setVisible(false);
            jbtnDodaj.setVisible(false);
            jbtnObrisi.setVisible(false);
            jtxtBrojRezervacije.setEnabled(false);

            Rezervacija r = (Rezervacija) Kontroler.vratiInstancuKontrolera().getSesija().get("izabrana_rezervacija");

            jtxtBrojRezervacije.setText(r.getRezervacijaID() + "");

            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            jtxtDatumRezervacije.setText(sdf.format(r.getDatumRezervacije()));
            datePicker.setDate(r.getDatumRezervacije());

            try {
                for (Korisnik korisnik : Kontroler.vratiInstancuKontrolera().vratiListuKorisnika()) {
                    jcbKorisnici.addItem(korisnik);
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FmUnosRezervacije.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FmUnosRezervacije.class.getName()).log(Level.SEVERE, null, ex);
            }
            jcbKorisnici.setSelectedItem(r.getKorisnik());

            TblModelStavkaRezervacije tmsr = new TblModelStavkaRezervacije(r);
            jtblStavkaRezervacije.setModel(tmsr);

            try {
                JComboBox jcb = new JComboBox(Kontroler.vratiInstancuKontrolera().vratiListuProstorija().toArray());
                jtblStavkaRezervacije.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(jcb));
            } catch (Exception ex) {
                Logger.getLogger(FmUnosRezervacije.class.getName()).log(Level.SEVERE, null, ex);
            }

            centrirajKolone();

        }
    }

    private Rezervacija kreirajRezervacijuSaForme() throws Exception {

        Rezervacija rezervacija = null;
        try {
            String rezervacijaID = jtxtBrojRezervacije.getText().trim();
//            String datumRezervacije = jtxtDatumRezervacije.getText().trim();
            Korisnik korisnik = (Korisnik) jcbKorisnici.getSelectedItem();

            rezervacija = kreirajObjekatRezervacija(rezervacijaID, korisnik);

        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return rezervacija;

    }

    private Rezervacija kreirajObjekatRezervacija(String rezervacijaID, Korisnik korisnik) throws Exception {

        TblModelStavkaRezervacije tmsr = (TblModelStavkaRezervacije) jtblStavkaRezervacije.getModel();
        Rezervacija r = tmsr.vratiRezervaciju();

        if (rezervacijaID == null || rezervacijaID.isEmpty()) {
            jtxtBrojRezervacije.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.red));
            throw new Exception("Unesite broj rezervacije!");
        }
        for (Character cifra : rezervacijaID.toCharArray()) {
            if (!Character.isDigit(cifra)) {
                jtxtBrojRezervacije.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.red));
                throw new Exception("Broj rezervacije mora biti broj!");
            }
        }
        r.setRezervacijaID(Integer.parseInt(rezervacijaID));

//        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//        try {
//            Date datumRez = sdf.parse(datumRezervacije);
//            r.setDatumRezervacije(datumRez);
//        } catch (ParseException parseException) {
//            jtxtDatumRezervacije.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.red));
//            throw new Exception("Unesite datum u formatu: 'dd.MM.yyyy'");
//        }
        
        if (datePicker.getDate() == null) {
            datePicker.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.red));
            throw new Exception("Izaberite datum!");
        } else {
            r.setDatumRezervacije(datePicker.getDate());
        }
         
        r.setKorisnik(korisnik);

        if (r.getListaStavki().isEmpty()) {
            throw new Exception("Unesite bar jednu stavku rezervacije!");
        }

        return r;

    }

    private void vratiDefaultBorder() {
        jtxtBrojRezervacije.setBorder(border);
        datePicker.setBorder(border);
//        jtxtDatumRezervacije.setBorder(border);
    }

    private void centrirajKolone() {
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < 5; i++) {
            jtblStavkaRezervacije.getColumnModel().getColumn(i).setCellRenderer(dtcr);
        }
    }

}
